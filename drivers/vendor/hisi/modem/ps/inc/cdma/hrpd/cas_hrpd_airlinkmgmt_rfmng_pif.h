/** ****************************************************************************

                    Huawei Technologies Sweden AB (C), 2001-2016

 ********************************************************************************
 * @author    Automatically generated by DAISY
 * @version
 * @date      2016-03-18 20:18:07
 * @file
 * @brief
 * @copyright Huawei Technologies Sweden AB
 *******************************************************************************/
#ifndef CAS_HRPD_AIRLINKMGMT_RFMNG_PIF_H
#define CAS_HRPD_AIRLINKMGMT_RFMNG_PIF_H

/*******************************************************************************
 1. Other files included
*******************************************************************************/

#include "vos.h"
#include "PsTypeDef.h"

#ifdef __cplusplus
#if __cplusplus
    extern "C" {
#endif /* __cpluscplus */
#endif /* __cpluscplus */
#pragma pack(4)

/*******************************************************************************
 2. Macro definitions
*******************************************************************************/


/*******************************************************************************
 3. Enumerations declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CAS_HRPD_AIRLINKMGMT_RFMNG_PIF_MSG_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CAS_HRPD_AIRLINKMGMT_RFMNG_PIF_MSG_TYPE_ENUM
{
    ID_CAS_RFUSER_HRPD_RESOURCE_APPLY_CNF                   = 0x0000, /**< @sa CAS_RFUSER_HRPD_RESOURCE_APPLY_CNF_STRU */
    ID_CAS_RFUSER_HRPD_RESOURCE_OCCUPY_IND                  = 0x0001, /**< @sa CAS_RFUSER_HRPD_RESOURCE_OCCUPY_IND_STRU */
    ID_CAS_RFUSER_HRPD_RESOURCE_RESET_IND                   = 0x0002, /**< @sa CAS_RFUSER_HRPD_RESOURCE_RESET_IND_STRU */
    ID_RFUSER_CAS_HRPD_RESOURCE_APPLY_REQ                   = 0x0003, /**< @sa RFUSER_CAS_HRPD_RESOURCE_APPLY_REQ_STRU */
    ID_RFUSER_CAS_HRPD_RESOURCE_REL_NTF                     = 0x0004, /**< @sa RFUSER_CAS_HRPD_RESOURCE_REL_NTF_STRU */
    ID_CAS_HRPD_AIRLINKMGMT_RFMNG_PIF_MSG_TYPE_ENUM_BUTT    = 0x0005
};
typedef VOS_UINT16 CAS_HRPD_AIRLINKMGMT_RFMNG_PIF_MSG_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : RFUSER_CAS_HRPD_TASK_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum RFUSER_CAS_HRPD_TASK_TYPE_ENUM
{
    RFUSER_CAS_HRPD_TASK_TYPE_NETWORK_SEARCH                = 0x0000,
    RFUSER_CAS_HRPD_TASK_TYPE_PS_NORMAL                     = 0x0001,
    RFUSER_CAS_HRPD_TASK_TYPE_LU                            = 0x0002,
    RFUSER_CAS_HRPD_TASK_TYPE_UATI                          = 0x0003,
    RFUSER_CAS_HRPD_TASK_TYPE_SESSION_CLOSE                 = 0x0004,
    RFUSER_CAS_HRPD_TASK_TYPE_ATTACH                        = 0x0005,
    RFUSER_CAS_HRPD_TASK_TYPE_PDN_CONN                      = 0x0006,
    RFUSER_CAS_HRPD_TASK_TYPE_PDN_DISCONN                   = 0x0007,
    RFUSER_CAS_HRPD_TASK_TYPE_DETACH                        = 0x0008,
    RFUSER_CAS_HRPD_TASK_TYPE_SESSION_NEG                   = 0x0009,
    RFUSER_CAS_HRPD_TASK_TYPE_PS_CONNECTION                 = 0x000A,
    RFUSER_CAS_HRPD_TASK_TYPE_CAS_SIGNAL                    = 0x000B,
    RFUSER_CAS_HRPD_TASK_TYPE_MO_KEEP_ALIVE                 = 0x000C,
    RFUSER_CAS_HRPD_TASK_TYPE_MT_KEEP_ALIVE                 = 0x000D,
    RFUSER_CAS_HRPD_TASK_TYPE_HARD_ID                       = 0x000E,
    RFUSER_CAS_HRPD_TASK_TYPE_ACCESS_AUTH                   = 0x000F,
    RFUSER_CAS_HRPD_TASK_TYPE_RN_SERVICE_STREAM_SIGNAL      = 0x0010,
    RFUSER_CAS_HRPD_TASK_TYPE_DATA_SERVICE_STREAM_SIGNAL    = 0x0011,
    RFUSER_CAS_HRPD_TASK_TYPE_DOS_SIGNAL                    = 0x0012,
    RFUSER_CAS_HRPD_TASK_TYPE_ENUM_BUTT                     = 0x0013
};
typedef VOS_UINT16 RFUSER_CAS_HRPD_TASK_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : RFUSER_CAS_OCCUPY_TYPE_ENUM_UINT8
 *
 * Description :
 *******************************************************************************/
enum RFUSER_CAS_OCCUPY_TYPE_ENUM
{
    RFUSER_CAS_OCCUPY_TYPE_SHORT                            = 0x00,
    RFUSER_CAS_OCCUPY_TYPE_LONG_URGENT                      = 0x01,
    RFUSER_CAS_OCCUPY_TYPE_LONG_NOT_URGENT                  = 0x02,
    RFUSER_CAS_OCCUPY_TYPE_ENUM_BUTT                        = 0x03
};
typedef VOS_UINT8 RFUSER_CAS_OCCUPY_TYPE_ENUM_UINT8;

/*******************************************************************************
 4. Message Header declaration
*******************************************************************************/

/*******************************************************************************
 5. Message declaration
*******************************************************************************/

/*******************************************************************************
 6. STRUCT and UNION declaration
*******************************************************************************/

/*******************************************************************************
 7. OTHER declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CAS_RFUSER_HRPD_RESOURCE_APPLY_CNF_STRU
 *
 * Description : This interface is supplied by almp to other module for rf
 * resource apply in cas proxy.
 * When almp get confirm from RRM, it will send this messge back to rfuser.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CAS_HRPD_AIRLINKMGMT_RFMNG_PIF_MSG_TYPE_ENUM_UINT16     enMsgId;
    VOS_UINT16                                              usOpId;
    RFUSER_CAS_HRPD_TASK_TYPE_ENUM_UINT16                   enTaskType;    /**< the task type of module which are applying rf resource */
    PS_BOOL_ENUM_UINT8                                      enApplyRFSucc; /**< if RF resource is allocated successfully */
    VOS_UINT8                                               ucReserve1;
} CAS_RFUSER_HRPD_RESOURCE_APPLY_CNF_STRU;

/** ****************************************************************************
 * Name        : CAS_RFUSER_HRPD_RESOURCE_OCCUPY_IND_STRU
 *
 * Description : This interface is supplied by almp to other module for rf
 * resource apply in cas proxy.
 * When RRM need to take rf resource back, almp will send this messge  to
 * notify rfuser.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CAS_HRPD_AIRLINKMGMT_RFMNG_PIF_MSG_TYPE_ENUM_UINT16     enMsgId;
    VOS_UINT16                                              usOpId;
    RFUSER_CAS_HRPD_TASK_TYPE_ENUM_UINT16                   enTaskType;   /**< the task type of module which are using rf resource */
    RFUSER_CAS_OCCUPY_TYPE_ENUM_UINT8                       enOccupyType;
    VOS_UINT8                                               ucReserve1;
} CAS_RFUSER_HRPD_RESOURCE_OCCUPY_IND_STRU;

/** ****************************************************************************
 * Name        : CAS_RFUSER_HRPD_RESOURCE_RESET_IND_STRU
 *
 * Description : This interface is supplied by almp to other module for rf
 * resource apply in cas proxy.
 * When almp need to clear the rfuser's resource state to null, almp will send
 * this messge  to notify rfuser.
 * This will happen when almp decide to release all.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CAS_HRPD_AIRLINKMGMT_RFMNG_PIF_MSG_TYPE_ENUM_UINT16     enMsgId;
    VOS_UINT16                                              usOpId;
} CAS_RFUSER_HRPD_RESOURCE_RESET_IND_STRU;

/** ****************************************************************************
 * Name        : RFUSER_CAS_HRPD_RESOURCE_APPLY_REQ_STRU
 *
 * Description : This interface is supplied by almp to other module for rf
 * resource apply in cas proxy.
 * When rfuser need rf resource, it will use this messge to apply.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CAS_HRPD_AIRLINKMGMT_RFMNG_PIF_MSG_TYPE_ENUM_UINT16     enMsgId;
    VOS_UINT16                                              usOpId;
    RFUSER_CAS_HRPD_TASK_TYPE_ENUM_UINT16                   enTaskType;    /**< the task type of module which are applying rf resource */
    VOS_UINT8                                               aucReserve[2];
} RFUSER_CAS_HRPD_RESOURCE_APPLY_REQ_STRU;

/** ****************************************************************************
 * Name        : RFUSER_CAS_HRPD_RESOURCE_REL_NTF_STRU
 *
 * Description : This interface is supplied by almp to other module for rf
 * resource apply in cas proxy.
 * Rfuser use this message to releasr rf resource.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CAS_HRPD_AIRLINKMGMT_RFMNG_PIF_MSG_TYPE_ENUM_UINT16     enMsgId;
    VOS_UINT16                                              usOpId;
    RFUSER_CAS_HRPD_TASK_TYPE_ENUM_UINT16                   enTaskType;      /**< the task type of module which use rf resource */
    VOS_UINT8                                               aucReserve[2];
    VOS_UINT32                                              ulRelDelaytimer; /**< The time to delay before RRM release rf resource Unit:ms. Range: 0 ~ 10000 */
} RFUSER_CAS_HRPD_RESOURCE_REL_NTF_STRU;

/*******************************************************************************
 8. Global  declaration
*******************************************************************************/

/*******************************************************************************
 9. Function declarations
*******************************************************************************/

#if ((VOS_OS_VER == VOS_WIN32) || (VOS_OS_VER == VOS_NUCLEUS))
#pragma pack()
#else
#pragma pack(0)
#endif

#ifdef __cplusplus
#if __cplusplus
}
#endif /* __cpluscplus */
#endif /* __cpluscplus */

#endif
